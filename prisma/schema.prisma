// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  avatar    String?
  phone     String?
  password  String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sessions  Session[]
  photos    Photo[]
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Golfer {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  foursomesAsPlayer1 Foursome[] @relation("Player1")
  foursomesAsPlayer2 Foursome[] @relation("Player2")
  foursomesAsPlayer3 Foursome[] @relation("Player3")
  foursomesAsPlayer4 Foursome[] @relation("Player4")
}

model Foursome {
  id        String   @id @default(cuid())
  round     Round
  course    Course   // golf course
  teeTime   DateTime // tee time for the round
  score     Int      @default(0) // strokes above/below par, can be negative
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  golfer1Id String?
  golfer2Id String?
  golfer3Id String?
  golfer4Id String?
  golfer1   Golfer?  @relation("Player1", fields: [golfer1Id], references: [id])
  golfer2   Golfer?  @relation("Player2", fields: [golfer2Id], references: [id])
  golfer3   Golfer?  @relation("Player3", fields: [golfer3Id], references: [id])
  golfer4   Golfer?  @relation("Player4", fields: [golfer4Id], references: [id])
}

enum Round {
  FRIDAY_MORNING
  FRIDAY_AFTERNOON
  SATURDAY_MORNING
  SATURDAY_AFTERNOON
}

enum Course {
  BLACK
  SILVER
}

model Photo {
  id          String   @id @default(cuid())
  cloudflareId String  @unique // Cloudflare Images ID
  url         String   // Public URL from Cloudflare Images
  caption     String?
  category    String?
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}
