import { useState, useEffect } from 'react';
import { redirect, Link } from 'react-router';
import { requireAuth } from '../lib/session';
import { Navigation } from '../components/Navigation';
import { Card, CardContent, Button, Input } from '../components/ui';
import { ArrowLeft } from 'lucide-react';
import { prisma } from '../lib/db';
// Types will be generated by React Router
type RouteParams = { photoId: string };
type LoaderArgs = { request: Request; params: RouteParams };
type ActionArgs = { request: Request; params: RouteParams };
type ComponentProps = { loaderData: any; actionData?: any };

export function meta({ params }: { params: RouteParams }) {
  return [
    { title: "Edit Photo - Scaletta Golf Trip" },
    { name: "description", content: "Edit photo details and category" },
  ];
}

export async function loader({ request, params }: LoaderArgs) {
  try {
    const user = await requireAuth(request);
    
    if (!user.isAdmin) {
      throw new Response("Unauthorized", { status: 403 });
    }

    const { photoId } = params;

    // Get the photo
    const photo = await prisma.photo.findUnique({
      where: { id: photoId },
      include: {
        user: {
          select: {
            name: true,
            email: true,
          },
        },
      },
    });

    if (!photo) {
      throw new Response("Photo not found", { status: 404 });
    }

    // Get all unique categories for the dropdown
    const allPhotos = await prisma.photo.findMany({
      select: { category: true },
    });
    const categories = [...new Set(allPhotos.map(photo => photo.category).filter(Boolean))];

    return { user, photo, categories };
  } catch (response) {
    throw response;
  }
}

export async function action({ request, params }: ActionArgs) {
  const user = await requireAuth(request);
  
  if (!user.isAdmin) {
    throw new Response("Unauthorized", { status: 403 });
  }

  const { photoId } = params;
  const formData = await request.formData();
  const action = formData.get('_action') as string;

  if (action === 'edit-photo') {
    const caption = formData.get('caption') as string || undefined;
    let category = formData.get('category') as string;
    
    // If category is "custom", use the custom category input
    if (category === 'custom') {
      category = formData.get('customCategory') as string || '';
    }
    
    // Convert empty string to null to properly unset category
    const categoryValue = category && category.trim() !== '' ? category : null;
    
    try {
      // Check if photo exists
      const existingPhoto = await prisma.photo.findUnique({
        where: { id: photoId },
      });

      if (!existingPhoto) {
        return { error: "Photo not found" };
      }

      // Update photo in database
      await prisma.photo.update({
        where: { id: photoId },
        data: {
          caption,
          category: categoryValue,
        },
      });
      
      return { success: true, message: 'Photo updated successfully' };
    } catch (error) {
      console.error('Photo edit error:', error);
      return { error: "Failed to update photo" };
    }
  }

  return { error: "Invalid action" };
}

export default function EditPhoto({ loaderData, actionData }: ComponentProps) {
  const { user, photo, categories } = loaderData;
  const [showCustomCategory, setShowCustomCategory] = useState(false);

  // Reset form state when action succeeds
  useEffect(() => {
    if (actionData?.success) {
      setShowCustomCategory(false);
    }
  }, [actionData]);

  return (
    <div className="min-h-screen bg-gray-50">
      <Navigation user={user} />
      
      <main className="max-w-3xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
        <div className="mb-8">
          {/* Back to Photos Link */}
          <Link 
            to="/gallery" 
            className="inline-flex items-center text-sm text-gray-500 hover:text-gray-700 mb-4"
          >
            <ArrowLeft size={16} className="mr-1" />
            Back to Photos
          </Link>
          
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            Edit Photo
          </h1>
          <p className="text-gray-600">
            Update the photo's caption and category
          </p>
        </div>

        <Card>
          <CardContent className="p-6">
            {/* Photo Preview */}
            <div className="mb-6 text-center">
              <img
                src={photo.url}
                alt={photo.caption || 'Photo preview'}
                className="max-w-md max-h-64 object-contain mx-auto rounded-lg border border-gray-300"
              />
              <p className="text-sm text-gray-500 mt-2">
                Uploaded by {photo.user.name}
              </p>
            </div>
            
            <form method="post" className="space-y-4">
              <input type="hidden" name="_action" value="edit-photo" />
              
              <div>
                <label htmlFor="caption" className="block text-sm font-medium text-gray-700 mb-1">
                  Caption
                </label>
                <Input 
                  id="caption"
                  name="caption" 
                  type="text" 
                  defaultValue={photo.caption || ''}
                  placeholder="Photo description"
                  className="w-full"
                />
              </div>
              
              <div>
                <label htmlFor="category" className="block text-sm font-medium text-gray-700 mb-1">
                  Category
                </label>
                <select 
                  id="category"
                  name="category" 
                  defaultValue={photo.category || ''}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                  onChange={(e) => setShowCustomCategory(e.target.value === 'custom')}
                >
                  <option value="">No category</option>
                  {categories.map((category: string) => (
                    <option key={category} value={category || ''}>{category}</option>
                  ))}
                  <option value="custom">+ Add new category</option>
                </select>
              </div>

              {showCustomCategory && (
                <div>
                  <label htmlFor="customCategory" className="block text-sm font-medium text-gray-700 mb-1">
                    New Category Name
                  </label>
                  <Input 
                    id="customCategory"
                    name="customCategory" 
                    type="text" 
                    placeholder="Enter new category name"
                    className="w-full"
                    required
                  />
                </div>
              )}

              {actionData?.error && (
                <div className="text-red-600 text-sm bg-red-50 border border-red-200 rounded-md p-3">
                  {actionData.error}
                </div>
              )}

              {actionData?.success && (
                <div className="text-green-600 text-sm bg-green-50 border border-green-200 rounded-md p-3">
                  {actionData.message}
                </div>
              )}

              <div className="pt-4">
                <Button type="submit">
                  Update Photo
                </Button>
              </div>
            </form>
          </CardContent>
        </Card>
      </main>
    </div>
  );
}